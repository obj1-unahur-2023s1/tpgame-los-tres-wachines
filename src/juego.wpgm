import wollok.game.*
import jugador.*
import obstaculos.*
import tipos.*
import hud.*
import sonidos.*
import habitaciones.*
import minijuegos.*

program juego{
	
	game.title("Escapa de la Mansion")
	game.height(18)
	game.width(28)
	game.boardGround("pisoBase.png")
	game.addVisual(bordeNegro)
	
	var estaEnCartelFinal = false
	
	const pasilloPrincipal = new PasilloPrincipal(minijuego = new MinijuegoPasillo(), id = 10)
	const miniJ1 = new MinijuegoCajasPlacas()
	const habitacion0 = new HabitacionIzq(minijuego = new MinijuegoCajasPlacas(),id = 0)
	const habitacion1 = new HabitacionIzq(minijuego = new MinijuegoPalancas(), id =1)
	const habitacion2 = new HabitacionIzq(minijuego = miniJ1, id =2)
	const habitacion3 = new HabitacionDer(minijuego = miniJ1, id =3)
	const habitacion4 = new HabitacionDer(minijuego = miniJ1, id =4)
	const habitacion5 = new HabitacionDer(minijuego = miniJ1, id =5)
	const habitaciones = [habitacion0,habitacion1,habitacion2,habitacion3,habitacion4,habitacion5]
	//PRUEBAS
	const pinche1 = new Trampa(position = game.at(9,8))
	const pinche2 = new Trampa(position = game.at(9,7))
	const pinche3 = new Trampa(position = game.at(9,6))
	const pinche4 = new Trampa(position = game.at(9,5))
	//
	const cartelFinal = new CartelMuerte()
	
	var habitacionActual = pasilloPrincipal
	var posDeAlexEnPasillo
	
//	habitacion1.agregarVisuales([pinche1,pinche2,pinche3,pinche4])

	pasilloPrincipal.mostrarVisuales()
	cantidadVida.texto(alex.getVidas())
		
	game.addVisual(cantidadVida)
	game.addVisual(visualVida)
	game.addVisual(alex)
	
	
	game.onCollideDo(alex, {objeto => 
		if(alex.colisionCon_DeTipo_(objeto, trampa)){
			objeto.activarTrampa()
			alex.movimientoPermitido(false)
			ouh.play()
			game.schedule(300, {
				alex.recibirDanio()
				cantidadVida.actualizar(alex)
			})
			game.schedule(600, {
				alex.movimientoPermitido(true)
				alex.visualPersonaje(false)
				if(alex.getVidas() == 0){
					estaEnCartelFinal = true
					habitacionActual.esconderVisuales()
					game.addVisual(cartelFinal)
				}
				objeto.estadoInicial()
			})
			//---colision con puerta---
		}else if(alex.colisionCon_DeTipo_(objeto, puerta)){
			const puertaId = objeto.id()
			game.removeVisual(alex)
			habitacionActual.esconderVisuales()
			if(puertaId.between(0,5)){
				if(puertaId.between(0,2)){
					posDeAlexEnPasillo = objeto.position().right(1)
					bordeNegro.image("NegroSalaHab"+alex.vistaActual()+".png")
					alex.position(game.at(25,9))
					habitacionActual = habitaciones.find({h=>h.id() == puertaId})
					habitacionActual.mostrarVisuales()
					game.addVisual(alex)
				}else if(puertaId.between(3,5)){
					posDeAlexEnPasillo = objeto.position().left(1)
					bordeNegro.image("NegroSalaHab"+alex.vistaActual()+".png")
					alex.position(game.at(2,9))
					habitacionActual = habitaciones.find({h=>h.id() == puertaId})
					habitacionActual.mostrarVisuales()
					game.addVisual(alex)
				}
			}else{
				bordeNegro.image("bordeNegroPasillo.png")
				alex.position(posDeAlexEnPasillo)
				habitacionActual = pasilloPrincipal
				habitacionActual.mostrarVisuales()
				game.addVisual(alex)
			}
			cantidadVida.actualizar(alex)
		}
//		else if(o.tipo() == fragmentoDeLLave){
//			fragmentosConseguidos++
//		}
	})
	
	keyboard.r().onPressDo({
		if(estaEnCartelFinal){
			habitacionActual = pasilloPrincipal
			habitacionActual.estadoInicial()
			game.removeVisual(cartelFinal)
			alex.position(game.center())
			alex.setVidas(3)
			cantidadVida.actualizar(alex)
			bordeNegro.image("bordeNegroPasillo.png")
			estaEnCartelFinal = false
		}
	})
	
	keyboard.t().onPressDo({
		if(estaEnCartelFinal){
			game.stop()
		}
	})

	
	keyboard.w().onPressDo({alex.moverArriba()})
	keyboard.a().onPressDo({alex.moverIzquierda()})
	keyboard.s().onPressDo({alex.moverAbajo()})
	keyboard.d().onPressDo({alex.moverDerecha()})
	
	keyboard.e().onPressDo({
		if(!estaEnCartelFinal and alex.movimientoPermitido()){
			//---puerta---
			if(alex.hayObstaculo_Adelante(puerta)){
				var posPuerta
				if(alex.vistaActual() == "Der"){	
					posPuerta = new Position(x = alex.position().x()+1 , y = alex.position().y())
				}else if(alex.vistaActual() == "Izq"){
					posPuerta = new Position(x = alex.position().x()-1 , y = alex.position().y())
				}
				var puertaAdelante = game.getObjectsIn(posPuerta).find({o => o.tipo() == puerta})
				if(!puertaAdelante.esAtravesable()){				
					puertaAdelante.abrirPuerta()
				}
				//---caja---
			}else{
				const objetosAManipular = game.colliders(alex)
				if(!alex.tieneLasManosOcupadas() and objetosAManipular.any({o => o.tipo() == objetoMovible})){
					const caja = objetosAManipular.find({o=>o.tipo() == objetoMovible})
					alex.agarrarObjeto(caja)
					habitacionActual.minijuego().removerElemento(caja)
					game.removeVisual(caja)
					alex.image("player"+alex.vistaActual()+"Caja.png")
					if(objetosAManipular.any({o => o.tipo() == placaPresion})){
						const placa = objetosAManipular.find({o=>o.tipo() == placaPresion})
						placa.desactivar()
					}
				}else if(alex.tieneLasManosOcupadas() and !alex.hayObstaculo_Adelante(puerta) and !objetosAManipular.any({o => o.tipo() == objetoMovible})){
					const caja = alex.objetoEnManos()
					alex.agarrarObjeto(null)
					habitacionActual.minijuego().agregarVisual(caja)
					caja.position(alex.position())
					game.addVisual(caja)
					alex.image("player"+alex.vistaActual()+".png")
					if(objetosAManipular.any({o => o.tipo() == placaPresion})){
						const placa = objetosAManipular.find({o=>o.tipo() == placaPresion})
						placa.activar()
						habitacionActual.minijuego().sumarUnaPlaca()
					}
				//---palanca---
				}else if(!alex.tieneLasManosOcupadas() and objetosAManipular.any({o => o.tipo() == palanca})){
					const palanca = objetosAManipular.find({o=>o.tipo() == palanca})
					if(!palanca.estaActiva()){						
						palanca.activar()
						habitacionActual.minijuego().sumarUnaPalanca(palanca.id())
					}
//					habitacionActual.listaMinijuego().add(palanca)
				}
			} 
		}
		if(habitacionActual.minijuego().minijuegoCompletado() and habitacionActual.minijuego().minijuegoEstaActivo()){
			// implementar bloqueo de puerta hasta que se finalize el minijuego
			habitacionActual.minijuego().desactivarMinijuego()
			var puertaEnPasillo = pasilloPrincipal.visuales().find({o => (o.tipo() == puerta and o.id() == habitacionActual.id())})
			puertaEnPasillo.bloquearPuerta()
			game.say(alex,"minijuego Finalizado")
		}
	})

	
	game.start()
}