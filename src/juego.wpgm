import wollok.game.*
import jugador.*
import obstaculos.*
import tipos.*
import hud.*
import sonidos.*
import habitaciones.*

program juego{
	
	game.title("Escapa de la Mansion")
	game.height(18)
	game.width(28)
	game.boardGround("pisoBase.png")
	game.addVisual(bordeNegro)
	
	var estaEnCartelFinal = false
	
	const pasilloPrincipal = new Habitacion(nombre = "pasillo")
	const habitacion0 = new Habitacion(nombre = "habitacion 0")
	const habitacion1 = new Habitacion(nombre = "habitacion 1")
	const habitacion2 = new Habitacion(nombre = "habitacion 2")
	const habitacion3 = new Habitacion(nombre = "habitacion 3")
	const habitacion4 = new Habitacion(nombre = "habitacion 4")
	const habitacion5 = new Habitacion(nombre = "habitacion 5")
	const habitaciones = [habitacion0,habitacion1,habitacion2,habitacion3,habitacion4,habitacion5]
	const caja1 = new CajaMadera(position = game.center())
	const caja2 = new CajaMadera(position = game.at(4,4))
	const caja3 = new CajaMadera(position = game.at(5,5))
	const caja4 = new CajaMadera(position = game.at(6,6))
	const pinche1 = new Trampa(position = game.at(9,8))
	const pinche2 = new Trampa(position = game.at(9,7))
	const pinche3 = new Trampa(position = game.at(9,6))
	const pinche4 = new Trampa(position = game.at(9,5))
	const cartelFinal = new CartelMuerte()
	const paredesHabIzq = new List()
	const paredesHabDer = new List()
	const puertaDer = new PuertaDer(position = game.at(26,9), id = 10,esAtravesable = true)
	const puertaDerDeco = new DecoAtravesable(position = game.at(25,9),image = "puertaCuartoIzqNoOBJETO.png")
	const puertaIzq = new PuertaIzq(position = game.at(1,9), id = 9,esAtravesable = true)
	puertaDer.image("puertaCostadoIzqAbierta2.png")
	puertaIzq.image("puertaCostadoDerAbierta2.png")
	
	var habitacionActual = pasilloPrincipal
	var posDeAlexEnPasillo
	
	var idPuerta = 0
	(1..16).forEach({posY =>
		if(posY%4!=0 or posY == 16){
			pasilloPrincipal.agregarVisual(new Pared(position = game.at(6,posY),image = "paredIzq.png"))
			pasilloPrincipal.agregarVisual(new Pared(position = game.at(21,posY),image = "paredDer.png"))	
		}else if(posY%4==0 and posY<16){
			pasilloPrincipal.agregarVisual(new PuertaIzq(position = game.at(6,posY), id = idPuerta))
			pasilloPrincipal.agregarVisual(new PuertaDer(position = game.at(21,posY), id = idPuerta+3))
			idPuerta += 1
		}
		if(posY != 9){
			paredesHabIzq.add(new Pared(position = game.at(26,posY),image = "paredDer.png"))
			paredesHabDer.add(new Pared(position = game.at(1,posY),image = "paredIzq.png"))
		}else{
			habitacion0.agregarVisual(puertaDer)
			habitacion1.agregarVisual(puertaDer)
			habitacion2.agregarVisual(puertaDer)
			habitacion0.agregarVisual(puertaDerDeco)
			habitacion1.agregarVisual(puertaDerDeco)
			habitacion2.agregarVisual(puertaDerDeco)
			habitacion3.agregarVisual(puertaIzq)
			habitacion4.agregarVisual(puertaIzq)
			habitacion5.agregarVisual(puertaIzq)
		}
	})
	
	habitacion0.agregarVisuales(paredesHabIzq)
	habitacion1.agregarVisuales(paredesHabIzq)
	habitacion2.agregarVisuales(paredesHabIzq)
	habitacion3.agregarVisuales(paredesHabDer)
	habitacion4.agregarVisuales(paredesHabDer)
	habitacion5.agregarVisuales(paredesHabDer)
	
	habitacion0.agregarVisuales([caja1,caja2,caja3,caja4])
	habitacion1.agregarVisuales([pinche1,pinche2,pinche3,pinche4])

	pasilloPrincipal.mostrarVisuales()
	cantidadVida.texto(alex.getVidas())
		
	game.addVisual(cantidadVida)
	game.addVisual(visualVida)
	game.addVisual(alex)
	
	
	game.onCollideDo(alex, {objeto => 
		if(alex.colisionCon_DeTipo_(objeto, trampa)){
			objeto.activarTrampa()
			alex.movimientoPermitido(false)
			ouh.play()
			game.schedule(300, {
				alex.recibirDanio()
				cantidadVida.actualizar(alex)
			})
			game.schedule(600, {
				alex.movimientoPermitido(true)
				alex.visualPersonaje(false)
				if(alex.getVidas() == 0){
					estaEnCartelFinal = true
					habitacionActual.esconderVisuales()
					game.addVisual(cartelFinal)
				}
				objeto.estadoInicial()
			})
			//---colision con puerta---
		}else if(alex.colisionCon_DeTipo_(objeto, puerta)){
			const puertaId = objeto.id()
			game.removeVisual(alex)
			habitacionActual.esconderVisuales()
			if(puertaId.between(0,5)){
				if(puertaId.between(0,2)){
					posDeAlexEnPasillo = objeto.position().right(1)
					bordeNegro.image("NegroSalaHab"+alex.vistaActual()+".png")
					alex.position(game.at(24,9))
					habitacionActual = habitaciones.get(puertaId)
					habitacionActual.mostrarVisuales()
					game.addVisual(alex)
				}else if(puertaId.between(3,5)){
					posDeAlexEnPasillo = objeto.position().left(1)
					bordeNegro.image("NegroSalaHab"+alex.vistaActual()+".png")
					alex.position(game.at(2,9))
					habitacionActual = habitaciones.get(puertaId)
					habitacionActual.mostrarVisuales()
					game.addVisual(alex)
				}
			}else{
				bordeNegro.image("bordeNegroPasillo.png")
				alex.position(posDeAlexEnPasillo)
				habitacionActual = pasilloPrincipal
				habitacionActual.mostrarVisuales()
				game.addVisual(alex)
			}
			cantidadVida.actualizar(alex)
		}
//		else if(o.tipo() == fragmentoDeLLave){
//			fragmentosConseguidos++
//		}
	})
	
	keyboard.r().onPressDo({
		if(estaEnCartelFinal){
			habitacionActual = pasilloPrincipal
			habitacionActual.estadoInicial()
			game.removeVisual(cartelFinal)
			alex.position(game.center())
			alex.setVidas(3)
			cantidadVida.actualizar(alex)
			bordeNegro.image("bordeNegroPasillo.png")
			estaEnCartelFinal = false
		}
	})
	
	keyboard.t().onPressDo({
		if(estaEnCartelFinal){
			game.stop()
		}
	})

	
	keyboard.w().onPressDo({alex.moverArriba()})
	keyboard.a().onPressDo({alex.moverIzquierda()})
	keyboard.s().onPressDo({alex.moverAbajo()})
	keyboard.d().onPressDo({alex.moverDerecha()})
	
	keyboard.e().onPressDo({
		//---caja---
		if(!estaEnCartelFinal and alex.movimientoPermitido()){
			if(alex.cajaEncima() == null and game.colliders(alex).any({o => o.tipo() == objetoMovible})){
				const caja = game.colliders(alex).filter({o=>o.tipo() == objetoMovible}).first()
				alex.cajaEncima(caja)
				habitacionActual.removerElemento(caja)
				game.removeVisual(caja)
				alex.image("player"+alex.vistaActual()+"Caja.png")
			}else if(alex.cajaEncima() != null and !alex.hayObstaculo_Adelante(puerta)){
				const caja = alex.cajaEncima()
				alex.cajaEncima(null)
				habitacionActual.agregarVisual(caja)
				caja.position(alex.position())
				game.addVisual(caja)
				alex.image("player"+alex.vistaActual()+".png")
			}
		} 
		//---puerta---
		if(alex.hayObstaculo_Adelante(puerta)){
			var posPuerta
			if(alex.vistaActual() == "Der"){	
				posPuerta = new Position(x = alex.position().x()+1 , y = alex.position().y())
			}else if(alex.vistaActual() == "Izq"){
				posPuerta = new Position(x = alex.position().x()-1 , y = alex.position().y())
			}
			var puertaAdelante = game.getObjectsIn(posPuerta).find({o => o.tipo() == puerta})
			if(!puertaAdelante.esAtravesable()){				
				puertaAdelante.abrirPuerta()
			}
		}
	})

	
	game.start()
}