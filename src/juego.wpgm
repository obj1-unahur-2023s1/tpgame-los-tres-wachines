import wollok.game.*
import jugador.*
import obstaculos.*
import tipos.*
import hud.*
import sonidos.*
import habitaciones.*
import minijuegos.*

program juego{
	
	game.title("Escapa de la Mansion")
	game.height(18)
	game.width(29)
	game.boardGround("pisoBase.png")
	game.addVisual(bordeNegro)
	
	var estaEnCartelMuerte = false
	var estaEnCartelInicio = true
	
	const pasilloPrincipal = new PasilloPrincipal(minijuego = new MinijuegoPasillo(), id = 10)
	const habitacion0 = new HabitacionIzq(minijuego = new MinijuegoCajasPlacas(),id = 0)
	const habitacion1 = new HabitacionIzq(minijuego = new MinijuegoPalancas(), id =1)
	const habitacion3 = new HabitacionDer(minijuego = new MinijuegoSimon(), id =2)
	const habitacion2 = new HabitacionDer(minijuego = new MinijuegoBloquesFormas(), id =3)
	const habitaciones = [habitacion0,habitacion1,habitacion2,habitacion3]
	const cartelMuerte = new Cartel(image = "cartelMuerte.png")
	const cartelInicio = new Cartel(image = "cartelInicio.png")
	const cartelFinal = new Cartel(image = "cartelJuegoCompletado.png")
	const botonReiniciar = new BotonReinicio() 
	const botonIniciar = new BotonInicio() 
	const botonTerminar = new BotonTerminar() 
	const musicaInicio = new Sonido(sonido = "cancionInicio.mp3",volumen = 0.1)
	const musicaFondo = new Sonido(sonido = "cancionFondo.mp3",volumen = 0.04)
	const musicaVictoria = new Sonido(sonido = "cancionVictoria.mp3",volumen = 0.1)
	var musicaDerrota = new Sonido(sonido = "cancionDerrota.mp3",volumen = 0.1)
	var sonidoNivelCompletado = new Sonido(sonido = "sonidoNivelCompletado.mp3",volumen = 0.5)
	var sonidoDanio = new Sonido(sonido = "ouh.mp3",volumen = 1)	
	
	var habitacionActual = pasilloPrincipal
	var posDeAlexEnPasillo
	
	const codigoMinijuegoCompletado = {
		habitacionActual.minijuego().desactivarMinijuego()
		habitacionActual.abrirPuertas()
		var puertaEnPasillo = pasilloPrincipal.visuales().find({o => (o.esDeTipo(puerta) and o.id() == habitacionActual.id())})
		puertaEnPasillo.bloquearPuerta()
		pasilloPrincipal.minijuego().nivel_Completado(habitacionActual.id())
		pasilloPrincipal.actualizarEstado()
		sonidoNivelCompletado.play()
		sonidoNivelCompletado = new Sonido(sonido = "sonidoNivelCompletado.mp3",volumen = 1)
		alex.sumarUnaVida()
		marco.actualizarVidas(alex.getVidas())
	}
	
	const codigoAlexRecibeDanio = {
		sonidoDanio.play()
		sonidoDanio = new Sonido(sonido = "ouh.mp3",volumen = 1)
		alex.recibirDanio()
		marco.actualizarVidas(alex.getVidas())
		if(alex.estaMuerto()){
			game.schedule(2000, {
				estaEnCartelMuerte = true
				habitacionActual.esconderVisuales()
				game.addVisual(cartelMuerte)
				game.addVisual(botonReiniciar)
				game.addVisual(botonTerminar)
				musicaFondo.pause()
				musicaDerrota = new Sonido(sonido = "cancionDerrota.mp3",volumen = 0.1)
				musicaDerrota.playLoop()
			})
		}
	}
	const codigoActualizarHUD = {
		game.removeVisual(marco)
		game.addVisual(marco)
		game.removeVisual(objetoInventario)
		game.addVisual(objetoInventario)
	}
	 
	game.addVisual(alex)
	game.addVisual(cartelInicio)
	game.addVisual(botonIniciar)
	
	musicaInicio.playLoop()
	
	keyboard.i().onPressDo({
		if(estaEnCartelInicio){
			botonIniciar.activar()
			game.schedule(300,{
				game.removeVisual(botonIniciar)
				pasilloPrincipal.mostrarVisuales()
				marco.actualizarVidas(alex.getVidas())
				game.addVisual(marco)	
				game.addVisual(objetoInventario)	
				game.removeVisual(cartelInicio)
				alex.estadoInicial()
				musicaInicio.stop()
				musicaFondo.playLoop()
				estaEnCartelInicio = false
			})
		}
	})
	
	game.onCollideDo(alex, {objeto => 
		if(alex.objeto_DeTipo_(objeto,trampa)){
			objeto.activarTrampa()
			codigoAlexRecibeDanio.apply()
			//---colision con puerta---
		}else if(alex.objeto_DeTipo_(objeto,puerta)){
			const puertaId = objeto.id()
			game.removeVisual(alex)
			habitacionActual.esconderVisuales()
			if(puertaId.between(0,1)){
				bordeNegro.image("NegroSalaHab"+alex.vistaActual()+".png")
				posDeAlexEnPasillo = objeto.position().right(1)
				habitacionActual = habitaciones.find({h=>h.id() == puertaId})
				alex.position(game.at(26,9))
			}else if(puertaId.between(2,3)){
				bordeNegro.image("NegroSalaHab"+alex.vistaActual()+".png")
				posDeAlexEnPasillo = objeto.position().left(1)
				habitacionActual = habitaciones.find({h=>h.id() == puertaId})
				alex.position(game.at(2,9))
			}else{
				bordeNegro.image("bordeNegroPasillo.png")
				alex.position(posDeAlexEnPasillo)
				habitacionActual = pasilloPrincipal
			}
			if(puertaId == 666){
				musicaFondo.stop()
				musicaVictoria.playLoop()
				game.addVisual(cartelFinal)
			}else{				
				habitacionActual.mostrarVisuales()
				game.addVisual(alex)
			}
			codigoActualizarHUD.apply()
		}
	})
	
	keyboard.r().onPressDo({
		if(estaEnCartelMuerte){
			botonReiniciar.activar()
			game.schedule(300,{
				alex.estadoInicial()
				habitacionActual = pasilloPrincipal
				habitacionActual.estadoInicial()
				habitaciones.forEach({h=>h.estadoInicial()})
				bordeNegro.image("bordeNegroPasillo.png")
				game.removeVisual(cartelMuerte)
				game.removeVisual(botonReiniciar)
				game.removeVisual(botonTerminar)
				musicaDerrota.stop()
				musicaFondo.resume()
				codigoActualizarHUD.apply()
				marco.actualizarVidas(alex.getVidas())
				estaEnCartelMuerte = false
				botonReiniciar.estadoInicial()
			})
		}
	})
	
	keyboard.t().onPressDo({
		if(estaEnCartelMuerte){
			botonTerminar.activar()
			game.schedule(200,{
				game.stop()				
			})
		}
	})
	
	keyboard.w().onPressDo({alex.moverArriba()})
	keyboard.a().onPressDo({alex.moverIzquierda()})
	keyboard.s().onPressDo({alex.moverAbajo()})
	keyboard.d().onPressDo({alex.moverDerecha()})
	
	keyboard.e().onPressDo({
		if(!estaEnCartelMuerte and alex.movimientoPermitido()){
			//---puerta---
			if(alex.hayObstaculo_Adelante(puerta)){
				var puertaAdelante = alex.obtenerObjetosAdelante().find({o => o.esDeTipo(puerta)})
				if(!puertaAdelante.esAtravesable()){				
					puertaAdelante.abrirPuerta()
				}
				//---caja---
			}else{
				if(!alex.tieneLasManosOcupadas() and alex.hayColisionConObjetoTipo_oTipo_(caja,bloqueForma) and !alex.hayColisionConObjetoTipo_(posaObjeto)){
					var objetoManipulable
					if(alex.hayColisionConObjetoTipo_(caja)){
						objetoManipulable = alex.objetoDeTipo_EnColision(caja)
					}else{
						objetoManipulable = alex.objetoDeTipo_EnColision(bloqueForma)
					}
					objetoInventario.image(objetoManipulable.image())
					alex.agarrarObjeto(objetoManipulable) 
					habitacionActual.minijuego().removerElemento(objetoManipulable)
					game.removeVisual(objetoManipulable)
					alex.actualizarVisual()
				}else if(alex.tieneLasManosOcupadas() and !alex.hayColisionConObjetoTipo_oTipo_(caja,bloqueForma)){
					const objetoManipulable = alex.objetoEnManos() 
					alex.soltarObjeto()
					objetoInventario.image("vacio.png")
					habitacionActual.minijuego().agregarVisual(objetoManipulable)
					objetoManipulable.position(alex.position())
					game.removeVisual(alex)
					game.addVisual(objetoManipulable)
					game.addVisual(alex)
					alex.actualizarVisual()
					if(alex.hayColisionConObjetoTipo_(posaObjeto)){
						const placa = alex.objetoDeTipo_EnColision(posaObjeto)
						placa.activar()
						habitacionActual.minijuego().recibirAccion(placa)
					}
					if(habitacionActual.minijuego().estaEnEstadoCritico()){
						codigoAlexRecibeDanio.apply()
					}
				//---palanca---
				}else if(!alex.tieneLasManosOcupadas() and alex.hayColisionConObjetoTipo_(palanca)){
					const palancaActual = alex.objetoDeTipo_EnColision(palanca)
					if(!palancaActual.estaActiva()){						
						palancaActual.activar()
						habitacionActual.minijuego().recibirAccion(palancaActual)
					}
					if(habitacionActual.minijuego().estaEnEstadoCritico()){
						codigoAlexRecibeDanio.apply()
					}
				}
			} 
		}
		if(habitacionActual.minijuego().minijuegoCompletado() and habitacionActual.minijuego().minijuegoEstaActivo()){
			codigoMinijuegoCompletado.apply()
		}
	})
	
	keyboard.space().onPressDo({
		if(!estaEnCartelMuerte and alex.movimientoPermitido() and alex.hayColisionConObjetoTipo_(placaSimon)){
			var unaPlacaSimon = alex.objetoDeTipo_EnColision(placaSimon)
			habitacionActual.minijuego().recibirAccion(unaPlacaSimon)
			if(habitacionActual.minijuego().estaEnEstadoCritico()){
						codigoAlexRecibeDanio.apply()
					}
		}
		if(habitacionActual.minijuego().minijuegoCompletado() and habitacionActual.minijuego().minijuegoEstaActivo()){
			codigoMinijuegoCompletado.apply()
		}
	})

	
	game.start()
}